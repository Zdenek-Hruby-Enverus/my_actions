name: calling a workflow

run-name: ${{ github.actor }} is calling

on:
    pull_request:
      branches: [ "main" ]

    workflow_dispatch:
        inputs:
            name:
                default: "John Doe"
                required: true
                type: string

            place:
                required: false
                type: choice
                options:
                  - "New York"
                  - "Old York"
                  - "ZOO York"
                  - "All"

jobs:
    init_j:
      runs-on: ubuntu-latest

      if: ${{ inputs.name == 'ASD' }}
      
      steps:
        - name: Just Init
          run: |
            echo "Initilialization ..."

    init_k:
      runs-on: ubuntu-latest

      if: ${{ inputs.name != 'ASD' }}

      steps:
        - name: Just Init
          run: |
            echo "Initilialization ..."

#        - name: Checkout Repo main branch
#          uses: actions/checkout@v3
#          with:
#            ref: 'main'

        - name: Checkout Repo
          uses: actions/checkout@v3

        - name: Get Diff
          run: |
            modified_files=$(git diff --name-only --diff-filter=ACMR origin/main HEAD \
            | grep \.py$ | sort -u | while IFS= read -r n; do echo "\"$n\""; done)
            packages=`echo $(echo ${modified_files[@]}) | tr ' ' ','`

        - name: test
          run: |
            echo ${{ inputs.place != 'New York' }}


    prepare_strategy_matrix:
      runs-on: ubuntu-latest

      needs: [ init_j, init_k ]

      if: (always() && (inputs.place != 'New York'))

      outputs:
        matrix_input: ${{ steps.final_prepare.outputs.prepared_matrix }}
        test_output: ${{ steps.test_result.outputs.test_output }}
        cond_output: ${{ steps.conditional_output.outputs.cond_output }}

      steps:
        - name: Prepared Input for All
          id: prepare_input_all
          if: ${{ inputs.place == 'All' }}
          run: |
            echo "PREPARED_MATRIX={\"include\":[{\"place\": \"New York\"},{\"place\": \"Old York\"},{\"place\": \"ZOO York\"}]}" >> $GITHUB_ENV
        
        - name: Prepared Input for One
          id: prepare_input_one
          if: ${{ inputs.place != 'All' }}
          run: |
            echo "PREPARED_MATRIX={\"include\":[{\"place\": \"${{ inputs.place }}\"}]}" >> $GITHUB_ENV

        - name: Check and Create Output
          id: final_prepare
          run: |
            echo ${{ env.PREPARED_MATRIX }}
            echo "prepared_matrix=${{ toJson(env.PREPARED_MATRIX) }}" >> $GITHUB_OUTPUT

        - name: test
          id: test_step
          run: |
            # echo "test_output={\"include\":[{\"place\": \"New York\"},{\"place\": \"Old York\"},{\"place\": \"ZOO York\"}]}" >> $GITHUB_OUTPUT
            echo "test_output={\"include\":[{\"place\": \"${{ inputs.place }}\"}]}" >> $GITHUB_OUTPUT

        - name: test_result
          id: test_result
          run: |
            if [ ${{ steps.prepare_input_all.outcome}} == 'success' ]
            then
              echo "AAAAAAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLL"
              echo "test_output={\"include\":[{\"place\": \"New York\"},{\"place\": \"Old York\"},{\"place\": \"ZOO York\"}]}" >> $GITHUB_OUTPUT

            elif [ ${{ steps.prepare_input_one.outcome}} == 'success' ]; then
              echo "OOOOOOOOOOOONNNNNNNNEEEEEEE"
              echo "test_output={\"include\":[{\"place\": \"${{ inputs.place }}\"}]}" >> $GITHUB_OUTPUT
            else
              echo "BLLLLLLLEEEEEEEEEEEEEEEEEEEEE"              
            fi
          shell: bash


        - name: Conditional Output
          id: conditional_output
          run: |
            if [[ ${{ github.event_name}} == 'workflow_dispatch' ]]; then
              echo "RUNNING DISPATCH"
              echo "cond_output=DISPATCHOUTPUT" >> $GITHUB_OUTPUT
            elif [[ ${{ github.event_name }} == 'pull_request' ]]; then
              echo "RUNNING PR"
              echo "cond_output=PROUTPUT" >> $GITHUB_OUTPUT
            else
              echo "NEVIM"
              echo "cond_output=NEVIMOUTPUT" >> $GITHUB_OUTPUT
            fi

    test_output:
      runs-on: ubuntu-latest
      needs: [ prepare_strategy_matrix ]

      steps:
        - name: Test Output
          run: |
            echo " ${{ needs.prepare_strategy_matrix.outputs.cond_output }} "

    work_with_input:
      runs-on: ubuntu-latest
      needs: [ prepare_strategy_matrix ]

      if: ${{ github.event_name == 'workflow_dispatch' }}

      strategy:
        matrix: ${{ fromJson(needs.prepare_strategy_matrix.outputs.test_output) }}

      steps:
        - name: Checkout Repo main branch
          uses: actions/checkout@v3
          with:
            ref: 'main'

        - name: Checkout Repo
          uses: actions/checkout@v3

        - name: Get Diff
          run: |
            modified_files=$(git diff --name-only --diff-filter=ACMR main HEAD \
            | grep \.py$ | sort -u | while IFS= read -r n; do echo "\"$n\""; done)
            packages=`echo $(echo ${modified_files[@]}) | tr ' ' ','`

        - name: Setup Python
          uses: actions/setup-python@v4
          with:
            python-version: 3.9

        - name: Run Python Script
          run: |
            python ./scripts/greetings.py --name '${{ inputs.name }}' --place '${{ matrix.place }}'
