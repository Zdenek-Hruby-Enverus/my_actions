name: learn-github-actions

run-name: ${{ github.actor }} is learning GitHub Actions

on: [push]

env:
  MYENVVAR: env_var_${{ github.run_id}}
  ANOTHERVAR: var_${{ github.run_id }}

jobs:
  check-bats-version:
    outputs:
        python_test: ${{ steps.check_path.outputs.my_path }}
        custom_output: ${{ steps.output_action.outputs.custom_action_output }}
        random-number: ${{ steps.output_action.outputs.random-number }}
        external-action-output: ${{ steps.external-action.outputs.external-action-output }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        mu: [0, 100]
        sigma: [1, 16]

    steps:
      - name: Checkout  
        uses: actions/checkout@v3

      - name: Node Setup
        uses: actions/setup-node@v3
        with:
          node-version: '14'
      - run: npm install -g bats
      - run: bats -v

      - name: Check Path
        id: check_path
        run:
            echo "my_path=$PATH" >> $GITHUB_OUTPUT

      - name: Check Env Vars
        run: |
          echo "Env Var $MYENVVAR"
          echo "Another env var $ANOTHERVAR"

      - name: Custom job as a step
        uses: ./.github/actions/first_action
        with:
            custom_param: "bazinga"
            mu: ${{ matrix.mu }}
            sigma: ${{ matrix.sigma }}

      - name: Custom action with output
        id: output_action
        uses: ./.github/actions/output_action

      - run: echo "external-action-output=${{ steps.output_action.outputs.random-number }}" >> $GITHUB_OUTPUT
        id: external-action
        shell: bash

      - name: Final Echo
        run: echo "That's it"

  python-stuff:
    runs-on: ubuntu-latest
    needs: [check-bats-version]
    strategy:
      matrix:
        mu: [0, 100]
        sigma: [1, 16]
    steps:
      - name: Echoing
        run:
            echo "Starting with python stuff"

      - name: Checkout  
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
            python-version: 3.9

      - name: Install poetry
        run: 
            pip install poetry

      - name: Poetry version
        run:
            echo $(poetry --version)

      - name: Check previous job path
        run:
            echo ${{ needs.check-bats-version.outputs.python_test }}

      - name: Check custom output
        run:
            echo ${{ needs.check-bats-version.outputs.external-action-output }}
        shell: bash

      - name: Run an easy python script
        run:
            python my_script.py --mu ${{ matrix.mu }} --sigma ${{ matrix.sigma }}

      - name:
        run:
            echo "Finish with python stuff"

  envjob1:
    runs-on: ubuntu-latest
    needs: [python-stuff]
    env:
      JOBENV: One-env-var
    steps:
      - name: Checkout  
        uses: actions/checkout@v3

      - name: ASD
        run:
          ls -l ./.github/actions

      - name: ONE
        run: echo $JOBENV

      - name: Check job
        run:
          echo ${{ github.job }}

      - name: Cond Run
        uses: ./.github/actions/cond_action

  envjob2:
    runs-on: ubuntu-latest
    needs: [python-stuff]
    env:
      JOBENV: Two-job-env
    steps:
      - name: Checkout  
        uses: actions/checkout@v3
      
      - name: Two      
        run: echo ${{ env.JOBENV }}

      - name: Check job
        run:
          echo ${{ github.job }}

      - name: Cond Run
        uses: ./.github/actions/cond_action

  using-reusable:
    needs: [envjob1, envjob2]
    
    strategy:
      matrix:
        include:
          - dbx-env: prod
          - dbx-env: dev
  
    uses: ./.github/workflows/reusable_wf.yml
    with:
      host: ${{ matrix.host }}
      token: ${{ matrix.token }}